02/04/2025
Today was the "testing phase" of the project. From what I can tell, Waldo sourced his code (or the reverse) from:
https://realpython.com/python-sockets/

Two files were created today:
- server.py
    - main loop
    - accept wrapper
    - service connection
- client.py
    - main loop
    - start connection
    - server connection

Logging has been set up with time stamps.

You run each with the following commands for testing:
"python3 server.py 127.0.0.1 65432"
"python3 client.py 127.0.0.1 65432"

You are currently able to send messages from client to server, and the server can respond.
It might be worth spending time abstracting a lot for our protocol and creating a "protocol.py" file for parsing functions.

02/05/2025
Started today's work by creating "setup.py"
This will reset our database and set up schema for use. We decided on two tables:
- users
  - user_id (primary)
  - username
  - pass_hash

- messages
 - message_id (primary)
 - sender_id
 - recipient_id
 - message
 - time (defaults to current time)

We decided to work on JSON first. We can still send messages to the server from multiple clients and echo it back,
but we really want to start testing out saving messages to the database via requests from the user.

We're going to work first on making sure that sign up works correctly, which will also let us test whether our
preliminary database strategy works. We'll start working on the client UI in a separate Python file at first,
and we can potentially merge files later if necessary/helpful.

02/06/2025
We made a more cohesive gameplan for how to start making concrete progress toward the goal listed yesterday.
We have a very basic UI --- which we found out should be (we think) in client.py --- and we've set up
threading/sockets so that we can successfully send the input to the UI to the server. Now, we're
working on creating a Bolt class to more systematically handling different kinds of actions.

In addition to populating the Bolt class with necessary protocol helper functions (to read the header length, get the message, etc.), we also
worked on designing the UI of different pages (Login, Main, and Delete).

MINIGOAL:
- Register from client UI to write to database, then have the server send back list of all users (TO UI).
- All done in JSON protocol

This minigoal should keep us on track to have everything set up correctly.
At this point, we have not considered all unit tests yet (we think getting a prototype up and running first is priority).

02/07/2025
There are some issues with recv on the server side.

It turns out that it's because we were creating the Bolt object with the listening socket, instead of the new socket.
We now have the client/server to a point where we can submit a username and password on the client UI, the server
will process them, and the client will print the server's response in its terminal. Now, we need to work on
transfering these results to the UI --- maybe even just printing anything on the UI (then we can work on
getting all users to the UI).

I think that root.after is the correct function to perform this loop: it seems like we need a separate root.after loop
for each screen, but that shouldn't be too big of an issue. I now have it setup so that the response takes you to the main
page, though I guess we want to do something with SQL now for actually registering/logging users in.

We need to think now about when/how to close sockets, since I think that we keep sockets open during the entire time that
the user UI is on (though we should time them out after a certain amount of time has passed). Right now, I'll just change
it to set the event mask to `r' on the server side once it's written everything --- I think this is right?

I'll start working on the SQL stuff until something breaks...

Not 100% sure where the SQL connection goes: I think it should be for each creation of a response on the server side.
I'll do it for each action for now, but the create_repsonse() function will need to be refactored eventually.

Got the SQL working for now. It's able to compare the SQL-stored hash to the hash of the user input. Obviously, it'll
never match yet because there's no way to register users yet. That's the next step.

02/08/2025

Fixed the server.py so that when a client closes, it just unregister's their selector and doesn't exit!
So, now multiple clients can easily access the server and leave when they want!

Perfect: time to start implementing full logic!

Let's start with login/register. When someone opens the application, they should first be prompted to enter a username.
If the username exists, ask for the password. Do not let them in until password is correct.

If the username doesn't exist, ask for password and confirmation password to add them to the database.
Logic should look like this:

- Enter username
  - Username exists -> prompt for password
    - If password doesn't match: don't log them in
    - If password match: bring to main back
    - If "back" button pressed, bring back to original page
  - Username doesn't exist --> prompt for password
    - If password + confirmation match: add to database and log in
    - If password doesn't match confirmation: tell them
    - If back pressed: bring back to original page

Will attempt implementation now; need to add more actions.

Got it working! Now passwords are hashed and we can get to the main messaging board.

Next, we want to introduce texting. For now, we will have a list of users on the RHS,
and we can select one to message. Users can now load and a user can select one of the users to start messaging,
however we are currently running into an issue when trying to write from the server to the client.

Possibly an error due to the selector mode. For now, pushing to main.
^^ Issue resolved, turns out it was just a syntax issue in the SQL query.
You are now able to send messages to another person, and the message shows up immediatley on client side.
Next, we need to figure out how, when a message is sent and the other person is online, they receive the message immediatley.

Our current idea is as follows:
- keep a dictionary of current connected users, their usernames, and their "bolt"
- When a "send_message" request is received from a client, the "bolt" from the recipient writes a response to the client telling it that a new message was received

For right now, this doesn't seem to be working. Maybe a good night's sleep will get our brains going in the morning.
For the record, we are currently printing "Checking..." in client's "check_new_message_request."

02/09/2025
We were able to get a mini version of live chat working: we shouldn't really be calling any methods other than process_events from the
server code. So, we can instead just write certain information about user1's message into process_events for the bolt linked to user2
and handle the request from there: that is, we send a ping back to user2 with the sender and the sent_message. Then, user2 can handle
the new message/ping on the client side.

To delete messages correctly, we actually need the main chat interface to be in the form of a tik listbox. Implemented deleting messages
feature. It (correctly) does not let you delete someone else's message, though we probably still need to display some kind of message that
you can't do so.

I think that we should set messages to delivered once setup_main() is called.