02/04/2025
Today was the "testing phase" of the project. From what I can tell, Waldo sourced his code (or the reverse) from:
https://realpython.com/python-sockets/

Two files were created today:
- server.py
    - main loop
    - accept wrapper
    - service connection
- client.py
    - main loop
    - start connection
    - server connection

Logging has been set up with time stamps.

You run each with the following commands for testing:
"python3 server.py 127.0.0.1 65432"
"python3 client.py 127.0.0.1 65432"

You are currently able to send messages from client to server, and the server can respond.
It might be worth spending time abstracting a lot for our protocol and creating a "protocol.py" file for parsing functions.

02/05/2025
Started today's work by creating "setup.py"
This will reset our database and set up schema for use. We decided on two tables:
- users
  - user_id (primary)
  - username
  - pass_hash

- messages
 - message_id (primary)
 - sender_id
 - recipient_id
 - message
 - time (defaults to current time)

We decided to work on JSON first. We can still send messages to the server from multiple clients and echo it back,
but we really want to start testing out saving messages to the database via requests from the user.

We're going to work first on making sure that sign up works correctly, which will also let us test whether our
preliminary database strategy works. We'll start working on the client UI in a separate Python file at first,
and we can potentially merge files later if necessary/helpful.

02/06/2025
We made a more cohesive gameplan for how to start making concrete progress toward the goal listed yesterday.
We have a very basic UI --- which we found out should be (we think) in client.py --- and we've set up
threading/sockets so that we can successfully send the input to the UI to the server. Now, we're
working on creating a Bolt class to more systematically handling different kinds of actions.

In addition to populating the Bolt class with necessary protocol helper functions (to read the header length, get the message, etc.), we also
worked on designing the UI of different pages (Login, Main, and Delete).

MINIGOAL:
- Register from client UI to write to database, then have the server send back list of all users (TO UI).
- All done in JSON protocol

This minigoal should keep us on track to have everything set up correctly.
At this point, we have not considered all unit tests yet (we think getting a prototype up and running first is priority).

02/07/2025
There are some issues with recv on the server side.

It turns out that it's because we were creating the Bolt object with the listening socket, instead of the new socket.
We now have the client/server to a point where we can submit a username and password on the client UI, the server
will process them, and the client will print the server's response in its terminal. Now, we need to work on
transfering these results to the UI --- maybe even just printing anything on the UI (then we can work on
getting all users to the UI).